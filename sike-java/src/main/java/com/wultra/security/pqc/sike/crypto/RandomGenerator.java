/*
 * Copyright 2020 Wultra s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wultra.security.pqc.sike.crypto;

import java.security.SecureRandom;

/**
 * Random generator for key material.
 *
 * @author Roman Strobl, roman.strobl@wultra.com
 */
public class RandomGenerator {

    // TODO - consider using Secure Random from Bouncy Castle
    private final SecureRandom secureRandom;

    /**
     * Random generator constructor.
     */
    public RandomGenerator() {
        secureRandom = new SecureRandom();
    }

    /**
     * Random generator constructor with provided SecureRandom.
     * @param secureRandom SecureRandom implementation to use.
     */
    public RandomGenerator(SecureRandom secureRandom) {
        this.secureRandom = secureRandom;
    }

    /**
     * Generate random bytes.
     * @param length Length of generated byte array.
     * @return Byte array with random bytes.
     */
    public byte[] generateRandomBytes(int length) {
        byte[] randomBytes = new byte[length];
        secureRandom.nextBytes(randomBytes);
        return randomBytes;
    }

}
