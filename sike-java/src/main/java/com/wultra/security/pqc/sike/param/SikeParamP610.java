/*
 * Copyright 2020 Wultra s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.wultra.security.pqc.sike.param;

import com.wultra.security.pqc.sike.math.Fp2Element;
import com.wultra.security.pqc.sike.math.FpElement;
import com.wultra.security.pqc.sike.math.api.Fp2Point;
import com.wultra.security.pqc.sike.math.api.Isogeny;
import com.wultra.security.pqc.sike.math.api.Montgomery;
import com.wultra.security.pqc.sike.math.optimized.IsogenyProjective;
import com.wultra.security.pqc.sike.math.optimized.MontgomeryProjective;
import com.wultra.security.pqc.sike.math.reference.Fp2PointAffine;
import com.wultra.security.pqc.sike.math.reference.IsogenyAffine;
import com.wultra.security.pqc.sike.math.reference.MontgomeryAffine;
import com.wultra.security.pqc.sike.model.ImplementationType;

import java.math.BigInteger;
import java.security.InvalidParameterException;

/**
 * SIKE parameters for variant SIKEp610.
 *
 * @author Roman Strobl, roman.strobl@wultra.com
 */
public class SikeParamP610 implements SikeParam {

    private final ImplementationType implementationType;
    private final Montgomery montgomery;
    private final Isogeny isogeny;

    private String name;

    // Basic Montgomery curve parameters
    private Fp2Element a;
    private Fp2Element b;
    private int eA;
    private int eB;
    private BigInteger ordA;
    private BigInteger ordB;
    private int msbA;
    private int msbB;

    // Field prime and public points
    private BigInteger prime;
    private Fp2Point pA;
    private Fp2Point qA;
    private Fp2Point rA;
    private Fp2Point pB;
    private Fp2Point qB;
    private Fp2Point rB;

    // Sizes of generated bytes
    private int cryptoBytes;
    private int messageBytes;

    // Configuration of isogeny computation optimizations
    private int treeRowsA;
    private int treeRowsB;
    private int treePointsA;
    private int treePointsB;
    private int[] strategyA;
    private int[] strategyB;

    /**
     * Constructor of SIKE parameters.
     * @param implementationType Implementation type.
     */
    public SikeParamP610(ImplementationType implementationType) {
        this.implementationType = implementationType;
        if (implementationType == ImplementationType.REFERENCE) {
            montgomery = new MontgomeryAffine();
            isogeny = new IsogenyAffine();
        } else if (implementationType == ImplementationType.OPTIMIZED) {
            montgomery = new MontgomeryProjective();
            isogeny = new IsogenyProjective();
        } else {
            throw new InvalidParameterException("Unsupported implementation type: " + implementationType);
        }
        init();
    }

    @Override
    public ImplementationType getImplementationType() {
        return implementationType;
    }

    @Override
    public Montgomery getMontgomery() {
        return montgomery;
    }

    @Override
    public Isogeny getIsogeny() {
        return isogeny;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Fp2Element getA() {
        return a;
    }

    @Override
    public Fp2Element getB() {
        return b;
    }

    @Override
    public int getEA() {
        return eA;
    }

    @Override
    public int getEB() {
        return eB;
    }

    @Override
    public BigInteger getOrdA() {
        return ordA;
    }

    @Override
    public BigInteger getOrdB() {
        return ordB;
    }

    @Override
    public int getMsbA() {
        return msbA;
    }

    @Override
    public int getMsbB() {
        return msbB;
    }

    @Override
    public BigInteger getPrime() {
        return prime;
    }

    @Override
    public Fp2Point getPA() {
        return pA;
    }

    @Override
    public Fp2Point getQA() {
        return qA;
    }

    @Override
    public Fp2Point getRA() {
        return rA;
    }

    @Override
    public Fp2Point getPB() {
        return pB;
    }

    @Override
    public Fp2Point getQB() {
        return qB;
    }

    @Override
    public Fp2Point getRB() {
        return rB;
    }

    @Override
    public int getCryptoBytes() {
        return cryptoBytes;
    }

    @Override
    public int getMessageBytes() {
        return messageBytes;
    }

    @Override
    public int getTreeRowsA() {
        return treeRowsA;
    }

    @Override
    public int getTreeRowsB() {
        return treeRowsB;
    }

    @Override
    public int getTreePointsA() {
        return treePointsA;
    }

    @Override
    public int getTreePointsB() {
        return treePointsB;
    }

    @Override
    public int[] getStrategyA() {
        return strategyA;
    }

    @Override
    public int[] getStrategyB() {
        return strategyB;
    }

    /**
     * Initialize variant SIKEp610.
     */
    private void init() {
        // EA = 305, EB = 192
        int FIELD_PRIME_PARAM_EA = 305;
        int FIELD_PRIME_PARAM_EB = 192;
        BigInteger FIELD_PRIME = new BigInteger("27BF6A768819010C251E7D88CB255B2FA10C4252A9AE7BF45048FF9ABB1784DE8AA5AB02E6E01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16);

        // A = 6, B = 1
        Fp2Element PUBLIC_PARAM_ELEMENT_A = Fp2Element.generate(FIELD_PRIME, 6);
        Fp2Element PUBLIC_PARAM_ELEMENT_B = Fp2Element.one(FIELD_PRIME);

        // Public points PA and QA
        FpElement PUBLIC_POINT_PA_X0 = new FpElement(FIELD_PRIME, new BigInteger("1B368BC6019B46CD802129209B3E65B98BC64A92BC4DB2F9F3AC96B97A1B9C124DF549B528F18BEECB1666D27D47530435E84221272F3A97FB80527D8F8A359F8F1598D365744CA3070A5F26C", 16));
        FpElement PUBLIC_POINT_PA_X1 = new FpElement(FIELD_PRIME, new BigInteger("1459685DCA7112D1F6030DBC98F2C9CBB41617B6AD913E6523416CCBD8ED9C7841D97DF83092B9B3F2AF00D62E08DAD8FA743CBCCCC1782BE0186A3432D3C97C37CA16873BEDE01F0637C1AA2", 16));
        FpElement PUBLIC_POINT_PA_Y0 = new FpElement(FIELD_PRIME, new BigInteger("1CD75CF512FFA9DF878EF495001A57ABC07FC7CE9BB488BB52DDCD7272D8A4FD17DD258ED3F844C862CF48803B9AC2668C7CB79C396128763B578080C30D14CA7EB709F98E3E682A391FB35A7", 16));
        FpElement PUBLIC_POINT_PA_Y1 = new FpElement(FIELD_PRIME, new BigInteger("2001062A6289E4082CED884029207A1ACDEC525D7BC165A6CFF8BB469A8588950A416DBB924D2D673E3D6C32D232F6E6ADA62B37608F652C0B8628827B304BF1365D8211346207B24EFF09458", 16));
        FpElement PUBLIC_POINT_QA_X0 = new FpElement(FIELD_PRIME, new BigInteger("25DA39EC90CDFB9BC0F772CDA52CB8B5A9F478D7AF8DBBA0AEB3E52432822DD88C38F4E3AEC0746E56149F1FE89707C77F8BA4134568629724F4A8E34B06BFE5C5E66E0867EC38B283798B8A", 16));
        FpElement PUBLIC_POINT_QA_X1 = new FpElement(FIELD_PRIME, new BigInteger("2250E1959256AE502428338CB4715399551AEC78D8935B2DC73FCDCFBDB1A0118A2D3EF03489BA6F637B1C7FEE7E5F31340A1A537B76B5B736B4CDD284918918E8C986FC02741FB8C98F0A0ED", 16));
        FpElement PUBLIC_POINT_QA_Y0 = new FpElement(FIELD_PRIME, new BigInteger("A4FD5539025C0611E4B1CEC3C36F0D7590C035D3A25AD93022849CCEB3F67E4B1DBE988404290DD8B87B8D5E69ED3B0C5CDBCA248DC9D174CF762012CFE2D725CFD92057F2DBF8B04C7B12CC", 16));
        FpElement PUBLIC_POINT_QA_Y1 = new FpElement(FIELD_PRIME, new BigInteger("201C807BD738624E22B87554A2E053A46A9573BA863D4A9D309533E30B27BF7DD8137F5CE0F79C263D9D050541D69817A839085A76395F879315F6999E3441FC8FB3936DEE1BEF5B4E0E25096", 16));
        FpElement PUBLIC_POINT_RA_X0 = new FpElement(FIELD_PRIME, new BigInteger("1B36A006D05F9E370D5078CCA54A16845B2BFF737C865368707C0DBBE9F5A62A9B9C79ADF11932A9FA4806210E25C92DB019CC146706DFBC7FA2638ECC4343C1E390426FAA7F2F07FDA163FB5", 16));
        FpElement PUBLIC_POINT_RA_X1 = new FpElement(FIELD_PRIME, new BigInteger("183C9ABF2297CA69699357F58FED92553436BBEBA2C3600D89522E7009D19EA5D6C18CFF993AA3AA33923ED93592B0637ED0B33ADF12388AE912BC4AE4749E2DF3C3292994DCF37747518A992", 16));
        // The Y points are not defined for R point, only x coordinates are used in optimized version
        FpElement PUBLIC_POINT_RA_Y0 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_RA_Y1 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        Fp2Point PUBLIC_POINT_PA = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_PA_X0, PUBLIC_POINT_PA_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_PA_Y0, PUBLIC_POINT_PA_Y1));
        Fp2Point PUBLIC_POINT_QA = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_QA_X0, PUBLIC_POINT_QA_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_QA_Y0, PUBLIC_POINT_QA_Y1));
        Fp2Point PUBLIC_POINT_RA = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_RA_X0, PUBLIC_POINT_RA_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_RA_Y0, PUBLIC_POINT_RA_Y1));

        // Public points PB, QB and RB
        FpElement PUBLIC_POINT_PB_X0 = new FpElement(FIELD_PRIME, new BigInteger("1587822E647707ED4313D3BE6A811A694FB201561111838A0816BFB5DEC625D23772DE48A26D78C04EEB26CA4A571C67CE4DC4C620282876B2F2FC2633CA548C3AB0C45CC991417A56F7FEFEB", 16));
        FpElement PUBLIC_POINT_PB_X1 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_PB_Y0 = new FpElement(FIELD_PRIME, new BigInteger("14F295114B69D4769AC06DD07F051AD1114BCB7FA6B6EDE19F840969AFD56FD1F728907D3320A0309462A9444D24FE754666DB2470080951B31C2AC59704ABC7670C3C3A992C3C1629791F30", 16));
        FpElement PUBLIC_POINT_PB_Y1 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_QB_X0 = new FpElement(FIELD_PRIME, new BigInteger("14E647CB19B7EAAAC640A9C26B9C26DB7DEDA8FC9399F4F8CE620D2B2200480F4338755AE16D0E090F15EA1882166836A478C6E161C938E4EB8C2DD779B45FFDD17DCDF158AF48DE126B3A047", 16));
        FpElement PUBLIC_POINT_QB_X1 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_QB_Y0 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_QB_Y1 = new FpElement(FIELD_PRIME, new BigInteger("E674067F5EA6DE85545C0A99E9E71E64FABFDC281D1E540FEDA47A56ED3ADCDDE1841083FABC7954B467C71AC6349B04974A7F9B688C5F735632FEB394146B0A080880069D8DA3324EDF795B", 16));
        FpElement PUBLIC_POINT_RB_X0 = new FpElement(FIELD_PRIME, new BigInteger("1DB73BC2DE666D24E59AF5E23B79251BA0D189629EF87E56C38778A448FACE312D08EDFB876C3FD45ECF3746D96E2CADBBA08B1A206C47DDD93137059E34C90E2E42E10F30F6E5F52DED74222", 16));
        FpElement PUBLIC_POINT_RB_X1 = new FpElement(FIELD_PRIME, new BigInteger("1B2C30180DAF5D91871555CE8EFEC76A4D521F877B754311228C7180A3E2318B4E7A00341FF99F34E35BF7A1053CA76FD77C0AFAE38E2091862AB4F1DD4C8D9C83DE37ACBA6646EDB4C238B48", 16));
        // The Y points are not defined for R point, only x coordinates are used in optimized version
        FpElement PUBLIC_POINT_RB_Y0 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        FpElement PUBLIC_POINT_RB_Y1 = new FpElement(FIELD_PRIME, new BigInteger("0", 16));
        Fp2Point PUBLIC_POINT_PB = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_PB_X0, PUBLIC_POINT_PB_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_PB_Y0, PUBLIC_POINT_PB_Y1));
        Fp2Point PUBLIC_POINT_QB = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_QB_X0, PUBLIC_POINT_QB_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_QB_Y0, PUBLIC_POINT_QB_Y1));
        Fp2Point PUBLIC_POINT_RB = new Fp2PointAffine(new Fp2Element(FIELD_PRIME, PUBLIC_POINT_RB_X0, PUBLIC_POINT_RB_X1), new Fp2Element(FIELD_PRIME, PUBLIC_POINT_RB_Y0, PUBLIC_POINT_RB_Y1));

        this.name = "SIKEp610";
        this.a = PUBLIC_PARAM_ELEMENT_A;
        this.b = PUBLIC_PARAM_ELEMENT_B;
        this.eA = FIELD_PRIME_PARAM_EA;
        this.eB = FIELD_PRIME_PARAM_EB;
        this.ordA = new BigInteger("65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032");
        this.ordB = new BigInteger("40483766022843281411184472189571654752207506882090305742200116101065766026718820758174775041");
        this.msbA = 306;
        this.msbB = 305;
        this.prime = FIELD_PRIME;
        this.pA = PUBLIC_POINT_PA;
        this.qA = PUBLIC_POINT_QA;
        this.rA = PUBLIC_POINT_RA;
        this.pB = PUBLIC_POINT_PB;
        this.qB = PUBLIC_POINT_QB;
        this.rB = PUBLIC_POINT_RB;
        this.cryptoBytes = 24;
        this.messageBytes = 24;
        this.treeRowsA = 152;
        this.treeRowsB = 192;
        this.treePointsA = 8;
        this.treePointsB = 10;
        this.strategyA = new int[]{67, 37, 21, 12, 7, 4, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 9, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 1, 2, 1, 1, 16, 9, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 1, 2, 1, 1, 8, 4, 2, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1, 33, 16, 8, 5, 2, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 2, 1, 1, 8, 4, 2, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1, 16, 8, 4, 2, 1, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1, 8, 4, 2, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1};
        this.strategyB = new int[]{86, 48, 27, 15, 8, 4, 2, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1, 7, 4, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 12, 7, 4, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 21, 12, 7, 4, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 9, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 1, 2, 1, 1, 38, 21, 12, 7, 4, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 9, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 1, 2, 1, 1, 17, 9, 5, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 1, 2, 1, 1, 8, 4, 2, 1, 1, 1, 2, 1, 1, 4, 2, 1, 1, 2, 1, 1};
    }

}
